import tkinter as tk
from tkinter import filedialog, messagebox
import re
import os
import PyPDF2  # Certifique-se de ter a versão atualizada
import pikepdf
import win32com.client as win32
# reg add HKEY_CURRENT_USER\Console /v VirtualTerminalLevel /t REG_DWORD /d 0x00000001 /f
# Função para imprimir mensagem de entrada com cor explicando o sistema (no terminal)
def print_entrada():
    azul = "\033[94m"
    amarelo = "\033[93m"
    reset = "\033[0m"
    mensagem = (
        f"{azul}Bem-vindo ao Sistema de Proteção de PDF e Geração de Rascunho de E-mail{reset}\n"
        f"{amarelo}Este sistema realiza as seguintes ações:\n"
        "1. Seleciona um arquivo PDF através de uma janela de diálogo.\n"
        "2. Extrai o CPF presente no PDF no formato 999.999.999-99.\n"
        "3. Protege o PDF com uma senha (o CPF sem formatação).\n"
        "4. Cria um rascunho de e-mail no Outlook com o PDF protegido anexado.\n"
        f"Siga as instruções na tela e tenha um ótimo uso!{reset}\n"
        "\nBy Anderson Marinho versão 1.0 - 03-2025\n"
    )
    print(mensagem)

def get_pdf_path():
    """Abre uma janela para o usuário selecionar o arquivo PDF."""
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.withdraw()  # Oculta a janela principal do Tkinter
    file_path = filedialog.askopenfilename(
        title="Selecione o arquivo PDF",
        filetypes=[("PDF files", "*.pdf")]
    )
    if not file_path:
        messagebox.showerror("Erro", "Nenhum arquivo foi selecionado!")
    root.destroy()  # Fecha a instância do Tkinter
    return file_path

def extract_cpf_from_pdf(pdf_path):
    """
    Percorre as páginas do PDF procurando o primeiro CPF no formato 999.999.999-99.
    Retorna o CPF encontrado somente com dígitos.
    """
    cpf_pattern = r'\d{3}\.\d{3}\.\d{3}-\d{2}'
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            text = page.extract_text() or ""
            match = re.search(cpf_pattern, text)
            if match:
                cpf_found = match.group()
                return cpf_found.replace('.', '').replace('-', '')
    raise ValueError("CPF não encontrado no PDF.")

def protect_pdf_with_password(pdf_path, password):
    """
    Cria uma cópia do PDF protegida com senha utilizando pikepdf.
    O novo arquivo terá o sufixo '_protegido.pdf' na mesma pasta.
    """
    base, ext = os.path.splitext(pdf_path)
    output_pdf_path = f"{base}_protegido{ext}"
    if os.path.exists(output_pdf_path):
        os.remove(output_pdf_path)
    with pikepdf.open(pdf_path) as pdf:
        pdf.save(
            output_pdf_path,
            encryption=pikepdf.Encryption(owner=password, user=password, R=4)
        )
    return output_pdf_path

def save_draft_with_attachment(pdf_path):
    """
    Cria um rascunho de e-mail no Outlook com o PDF anexado.
    """
    pdf_path_normalizado = os.path.normpath(os.path.abspath(pdf_path))
    outlook = win32.Dispatch('Outlook.Application')
    mail = outlook.CreateItem(0)
    mail.Subject = "Informe de Rendimentos 2024/2025"
    mail.Body = (
        "Segue em anexo o informe de rendimentos protegido.\n"
        "A senha para abrir o PDF é o seu CPF somente números, sem ponto ou traço.\n"
        "\n\n"
        "Atenciosamente,\n"
    )
    mail.Attachments.Add(pdf_path_normalizado)
    mail.Save()
    mail.Display()  # Abre o rascunho para conferência

def perguntar_continuar():
    """
    Exibe uma janela perguntando se o usuário deseja processar outro arquivo.
    Retorna True se sim, ou False caso contrário.
    """
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.withdraw()
    resposta = messagebox.askquestion("Continuar", "Deseja processar outro arquivo?")
    root.destroy()
    return resposta == 'yes'

def main():
    try:
        pdf_path = get_pdf_path()
        if not pdf_path:
            # Se nenhum arquivo for selecionado, encerra o processamento
            return False
        cpf = extract_cpf_from_pdf(pdf_path)
        print(f"CPF encontrado: {cpf}")
        protected_pdf_path = protect_pdf_with_password(pdf_path, cpf)
        print(f"PDF protegido criado: {protected_pdf_path}")
        save_draft_with_attachment(protected_pdf_path)
        print("Rascunho do e-mail salvo e exibido no Outlook.")
        # Exibe uma messagebox informando que o processo foi concluído com sucesso
        root = tk.Tk()
        root.attributes("-topmost", True)
        root.withdraw()
        messagebox.showinfo("Sucesso", "Processo concluído com sucesso!")
        root.destroy()
        return True
    except Exception as e:
        root = tk.Tk()
        root.attributes("-topmost", True)
        root.withdraw()
        messagebox.showerror("Erro", f"Ocorreu um erro: {e}")
        root.destroy()
        print(f"Erro: {e}")
        return False

if __name__ == "__main__":
    print_entrada()
    while True:
        if not main():
            print("Encerrando o sistema. Até logo!")
            break
        if not perguntar_continuar():
            print("Encerrando o sistema. Até logo!")
            break
